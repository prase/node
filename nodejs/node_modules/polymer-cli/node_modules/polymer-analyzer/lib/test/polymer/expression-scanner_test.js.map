{"version":3,"sources":["test/polymer/expression-scanner_test.ts"],"names":[],"mappings":"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","file":"expression-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\n\nimport {HtmlParser} from '../../html/html-parser';\nimport {scanDocumentForExpressions} from '../../polymer/expression-scanner';\nimport {CodeUnderliner} from '../test-utils';\n\nsuite('ExpressionScanner', () => {\n\n  suite('scan()', () => {\n    test('finds whole-attribute expressions', async() => {\n      const contents = `\n        <dom-module id=\"foo-elem\">\n          <template>\n            <div id=\"{{foo}}\"></div>\n            <input value=\"{{val::changed}}\">\n            <template is=\"dom-if\">\n              <div id=\"[[bar]]\"></div>\n            </template>\n            <div id=\"{{bada(wing, daba.boom, 10)}}\"></div>\n          </template>\n          <script>\n            Polymer({\n              is: 'foo-elem',\n            });\n          </script>\n        </dom-module>\n\n        <div id=\"{{nope}}\"></div>\n\n        <template is=\"dom-bind\">\n          <div id=\"{{baz}}\"></div>\n        </template>\n      `;\n      const underliner = CodeUnderliner.withMapping('test.html', contents);\n      const document = new HtmlParser().parse(contents, 'test.html');\n\n      const results = await scanDocumentForExpressions(document);\n      const expressions = results.expressions;\n\n      assert.deepEqual(results.warnings, []);\n      assert.deepEqual(\n          await underliner.underline(expressions.map((e) => e.sourceRange)), [\n            `\n            <div id=\"{{foo}}\"></div>\n                       ~~~`,\n            `\n            <input value=\"{{val::changed}}\">\n                            ~~~~~~~~~~~~`,\n            `\n            <div id=\"{{bada(wing, daba.boom, 10)}}\"></div>\n                       ~~~~~~~~~~~~~~~~~~~~~~~~~`,\n            `\n              <div id=\"[[bar]]\"></div>\n                         ~~~`,\n            `\n          <div id=\"{{baz}}\"></div>\n                     ~~~`,\n          ]);\n      assert.deepEqual(\n          expressions.map((e) => e.direction), ['{', '{', '{', '[', '{']);\n      assert.deepEqual(\n          expressions.map((e) => e.expressionText),\n          ['foo', 'val', 'bada(wing, daba.boom, 10)', 'bar', 'baz']);\n      assert.deepEqual(\n          expressions.map((e) => e.eventName),\n          [undefined, 'changed', undefined, undefined, undefined]);\n      assert.deepEqual(\n          expressions.map((e) => e.attribute && e.attribute.name),\n          ['id', 'value', 'id', 'id', 'id']);\n      assert.deepEqual(\n          expressions.map((e) => e.properties.map((p) => p.name)),\n          [['foo'], ['val'], ['bada', 'wing', 'daba'], ['bar'], ['baz']]);\n      assert.deepEqual(\n          expressions.map((e) => e.warnings), [[], [], [], [], []]);\n      assert.deepEqual(\n          expressions.map((e) => e.databindingInto),\n          ['attribute', 'attribute', 'attribute', 'attribute', 'attribute']);\n    });\n\n    test('finds interpolated attribute expressions', async() => {\n      const contents = `\n        <template is=\"dom-bind\">\n          <div id=\" {{foo}}\"></div>\n          <div id=\"bar {{val}} baz\">\n          <div id=\" [[x]]{{y}}\"></div>\n        </template>\n      `;\n      const underliner = CodeUnderliner.withMapping('test.html', contents);\n      const document = new HtmlParser().parse(contents, 'test.html');\n\n      const results = await scanDocumentForExpressions(document);\n      const expressions = results.expressions;\n\n      assert.deepEqual(results.warnings, []);\n      assert.deepEqual(\n          await underliner.underline(expressions.map((e) => e.sourceRange)), [\n            `\n          <div id=\" {{foo}}\"></div>\n                      ~~~`,\n            `\n          <div id=\"bar {{val}} baz\">\n                         ~~~`,\n            `\n          <div id=\" [[x]]{{y}}\"></div>\n                      ~`,\n            `\n          <div id=\" [[x]]{{y}}\"></div>\n                           ~`\n          ]);\n      assert.deepEqual(\n          expressions.map((e) => e.direction), ['{', '{', '[', '{']);\n      assert.deepEqual(\n          expressions.map((e) => e.expressionText), ['foo', 'val', 'x', 'y']);\n      assert.deepEqual(\n          expressions.map((e) => e.properties.map((p) => p.name)),\n          [['foo'], ['val'], ['x'], ['y']]);\n      assert.deepEqual(expressions.map((e) => e.warnings), [[], [], [], []]);\n      assert.deepEqual(\n          expressions.map((e) => e.eventName),\n          [undefined, undefined, undefined, undefined]);\n      assert.deepEqual(\n          expressions.map((e) => e.attribute && e.attribute.name),\n          ['id', 'id', 'id', 'id']);\n      assert.deepEqual(expressions.map((e) => e.databindingInto), [\n        'string-interpolation',\n        'string-interpolation',\n        'string-interpolation',\n        'string-interpolation'\n      ]);\n    });\n\n    test('finds expressions in text nodes', async() => {\n      const contents = `\n        <template is=\"dom-bind\">\n          <div>{{foo}}</div>\n          <div>\n            {{bar}} + {{baz}}[[zod]]\n            {{\n              multiline(\n                expressions\n              )\n            }}\n          </div>\n        </template>\n      `;\n\n      const underliner = CodeUnderliner.withMapping('test.html', contents);\n      const document = new HtmlParser().parse(contents, 'test.html');\n\n      const results = await scanDocumentForExpressions(document);\n      const expressions = results.expressions;\n\n      assert.deepEqual(results.warnings, []);\n      assert.deepEqual(\n          await underliner.underline(expressions.map((e) => e.sourceRange)), [\n            `\n          <div>{{foo}}</div>\n                 ~~~`,\n            `\n            {{bar}} + {{baz}}[[zod]]\n              ~~~`,\n            `\n            {{bar}} + {{baz}}[[zod]]\n                        ~~~`,\n            `\n            {{bar}} + {{baz}}[[zod]]\n                               ~~~`,\n            `\n            {{\n              ~\n              multiline(\n~~~~~~~~~~~~~~~~~~~~~~~~\n                expressions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n              )\n~~~~~~~~~~~~~~~\n            }}\n~~~~~~~~~~~~`\n          ]);\n      assert.deepEqual(\n          expressions.map((e) => e.direction), ['{', '{', '{', '[', '{']);\n      assert.deepEqual(expressions.map((e) => e.expressionText), [\n        'foo',\n        'bar',\n        'baz',\n        'zod',\n        `\n              multiline(\n                expressions\n              )\n            `\n      ]);\n      assert.deepEqual(\n          expressions.map((e) => e.properties.map((p) => p.name)),\n          [['foo'], ['bar'], ['baz'], ['zod'], ['multiline', 'expressions']]);\n      assert.deepEqual(\n          expressions.map((e) => e.warnings), [[], [], [], [], []]);\n      assert.deepEqual(\n          expressions.map((e) => e.eventName),\n          [undefined, undefined, undefined, undefined, undefined]);\n      assert.deepEqual(\n          expressions.map((e) => e.attribute && e.attribute.name),\n          [undefined, undefined, undefined, undefined, undefined]);\n      assert.deepEqual(expressions.map((e) => e.databindingInto), [\n        'string-interpolation',\n        'string-interpolation',\n        'string-interpolation',\n        'string-interpolation',\n        'string-interpolation'\n      ]);\n    });\n\n    test('gives accurate locations for parse errors', async() => {\n      const contents = `\n        <template is=\"dom-bind\">\n          <div id=\"{{foo(}}\"></div>\n          <div id='[[\n            foo bar\n          ]]'></div>\n          {{]}}\n\n          <!-- ignores expressions that are invalid JS -->\n          <div id=\"{{foo(bar.*)}}\"></div>\n          <div id=\"{{foo(bar.0)}}\"></div>\n\n          <!-- finds warnings in valid JS but invalid Polymer expressions -->\n          <div id=\"{{-foo}}\"></div>\n          {{foo(!bar, () => baz)}}\n        </template>\n      `;\n\n      const underliner = CodeUnderliner.withMapping('test.html', contents);\n      const document = new HtmlParser().parse(contents, 'test.html');\n\n      const results = await scanDocumentForExpressions(document);\n      assert.deepEqual(\n          await underliner.underline(\n              results.warnings.map((w) => w.sourceRange)),\n          [\n            `\n          <div id=\"{{foo(}}\"></div>\n                         ~`,\n            `\n            foo bar\n                ~`,\n            `\n          {{]}}\n            ~`,\n            `\n          <div id=\"{{-foo}}\"></div>\n                     ~~~~`,\n            `\n          {{foo(!bar, () => baz)}}\n                ~~~~`,\n            `\n          {{foo(!bar, () => baz)}}\n                      ~~~~~~~~~`\n          ]);\n    });\n  });\n\n});\n"]}