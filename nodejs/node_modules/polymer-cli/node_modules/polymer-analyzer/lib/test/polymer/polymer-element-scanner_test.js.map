{"version":3,"sources":["test/polymer/polymer-element-scanner_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;;AAEH,sEAAsE;AAEtE,+BAA4B;AAE5B,0EAAoE;AACpE,mFAA4E;AAE5E,KAAK,CAAC,uBAAuB,EAAE;IAE7B,KAAK,CAAC,QAAQ,EAAE;QACd,IAAI,OAA8B,CAAC;QAEnC,KAAK,CAAC;YACJ,OAAO,GAAG,IAAI,+CAAqB,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wBAAwB,EAAE;YAC7B,MAAM,QAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA8Db,CAAC;YAEL,MAAM,QAAQ,GACV,IAAI,oCAAgB,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;YACjE,MAAM,KAAK,GAAG,CAAM,OAAgB,oDAAK,MAAM,CAAN,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAA,GAAA,CAAC;YAEnE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAErD,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;YAErE,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,EAC9C,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC,CAAC;YAC7C,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;YAEzE,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAE/C,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,CAAC,CAAC;iBACN,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;iBAC/C,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC3D,CAAC;oBACC,GAAG;oBACH;wBACE,kCAAkC;wBAClC,wCAAwC;qBACzC;iBACF,CAAC,CAAC,CAAC;YAER,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE;gBACvD,oBAAoB;gBACpB,sBAAsB;gBACtB,6BAA6B;gBAC7B,uCAAuC;aACxC,CAAC,CAAC;YAEH,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;gBACpE,CAAC,GAAG,EAAE,SAAS,CAAC;gBAChB,CAAC,GAAG,EAAE,QAAQ,CAAC;gBACf,CAAC,GAAG,EAAE,QAAQ,CAAC;gBACf,CAAC,GAAG,EAAE,QAAQ,CAAC;gBACf,CAAC,GAAG,EAAE,QAAQ,CAAC;gBACf,CAAC,GAAG,EAAE,QAAQ,CAAC;gBACf,CAAC,GAAG,EAAE,SAAS,CAAC;gBAChB,CAAC,GAAG,EAAE,QAAQ,CAAC;gBACf,CAAC,KAAK,EAAE,QAAQ,CAAC;aAClB,CAAC,CAAC;YAEH,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE;gBAC1D,CAAC,GAAG,EAAE,SAAS,CAAC;gBAChB,CAAC,GAAG,EAAE,SAAS,CAAC;gBAChB,CAAC,GAAG,EAAE,SAAS,CAAC;gBAChB,CAAC,GAAG,EAAE,SAAS,CAAC;gBAChB,CAAC,GAAG,EAAE,WAAW,CAAC;gBAClB,CAAC,GAAG,EAAE,SAAS,CAAC;gBAChB,CAAC,GAAG,EAAE,SAAS,CAAC;gBAChB,CAAC,GAAG,EAAE,SAAS,CAAC;gBAChB,CAAC,KAAK,EAAE,aAAa,CAAC;aACvB,CAAC,CAAC;YAEP,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EACnE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YAErB,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,CAAC,CAAC;iBACN,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;iBACnC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,EACpC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;YAEnC,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EACjE,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;YAElB,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE;gBACtC,EAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAC;gBACvC,EAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAC;aACvC,CAAC,CAAC;YAEH,oEAAoE;YACpE,aAAM,CAAC,KAAK,CACR,QAAQ,CAAC,CAAC,CAAC;iBACN,QAAQ;iBACR,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,+BAA+B,CAAC;iBACzD,MAAM,EACX,CAAC,CAAC,CAAC;YACP,kDAAkD;YAClD,aAAM,CAAC,KAAK,CACR,QAAQ,CAAC,CAAC,CAAC;iBACN,QAAQ;iBACR,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,+BAA+B,CAAC;iBACzD,MAAM,EACX,CAAC,CAAC,CAAC;QACT,CAAC,CAAA,CAAC,CAAC;QAEH,IAAI,CAAC,iCAAiC,EAAE;YACtC,mEAAmE;YACnE,iCAAiC;YACjC,MAAM,QAAQ,GAAG;;;;QAIf,CAAC;YAEH,MAAM,QAAQ,GACV,IAAI,oCAAgB,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;YACjE,MAAM,KAAK,GAAG,CAAM,OAAgB,oDAAK,MAAM,CAAN,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAA,GAAA,CAAC;YAEnE,4BAA4B;YAC5B,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACtC,CAAC,CAAA,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"polymer-element-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/// <reference path=\"../../../node_modules/@types/mocha/index.d.ts\" />\n\nimport {assert} from 'chai';\nimport {Visitor} from '../../javascript/estree-visitor';\nimport {JavaScriptParser} from '../../javascript/javascript-parser';\nimport {PolymerElementScanner} from '../../polymer/polymer-element-scanner';\n\nsuite('PolymerElementScanner', () => {\n\n  suite('scan()', () => {\n    let scanner: PolymerElementScanner;\n\n    setup(() => {\n      scanner = new PolymerElementScanner();\n    });\n\n    test('finds polymer elements', async() => {\n      const contents = `Polymer({\n        is: 'x-foo',\n        properties: {\n          a: {\n            type: Boolean,\n            value: 5\n          },\n          b: {\n            type: String,\n            value: function() {\n              return 'test';\n            }\n          },\n          c: {\n            type: Number,\n            readOnly: true\n          },\n          d: {\n            type: Number,\n            computed: '_computeD()'\n          },\n          e: {\n            type: String,\n            notify: true\n          },\n          f: {\n            type: Object,\n            observer: '_observeF'\n          },\n          g: {\n            type: {},\n            computed: '_computeG()',\n            readOnly: false\n          },\n          h: String,\n          all: {\n            type: Object,\n            notify: true,\n            readOnly: false,\n            reflectToAttribute: false,\n            observer: '_observeAll'\n          }\n        },\n        observers: [\n          '_anObserver()',\n          '_anotherObserver()'\n        ],\n        listeners: {\n          'event-a': '_handleA',\n          eventb: '_handleB',\n          'event-c': _handleC,\n          [['event', 'd'].join('-')]: '_handleD'\n        },\n        customPublicMethod: (foo, bar) => { return foo + bar; },\n        _customPrivateMethod: (foo, bar) => { return foo + bar; },\n        /** This is an instance method with JS Doc */\n        customPublicMethodWithJsDoc: (foo, bar) => { return foo + bar; },\n        customPublicMethodWithClassicFunction: function(foo, bar) { return foo + bar; },\n      });\n      Polymer({\n        is: 'x-bar',\n        listeners: []\n      });`;\n\n      const document =\n          new JavaScriptParser().parse(contents, 'test-document.html');\n      const visit = async(visitor: Visitor) => document.visit([visitor]);\n\n      const features = await scanner.scan(document, visit);\n\n      assert.deepEqual(features.map((f) => f.tagName), ['x-foo', 'x-bar']);\n\n      assert.deepEqual(\n          features[0].observers.map((o) => o.expression),\n          ['_anObserver()', '_anotherObserver()']);\n      assert.deepEqual(\n          features[0].events.map((e) => e.name), ['e-changed', 'all-changed']);\n\n      assert.equal(features[0].properties.length, 9);\n\n      assert.deepEqual(\n          features[0]\n              .properties.filter((p) => p.warnings.length > 0)\n              .map((p) => [p.name, p.warnings.map((w) => w.message)]),\n          [[\n            'g',\n            [\n              'Invalid type in property object.',\n              'Unable to determine type for property.'\n            ]\n          ]]);\n\n      assert.deepEqual(features[0].methods.map((m) => m.name), [\n        'customPublicMethod',\n        '_customPrivateMethod',\n        'customPublicMethodWithJsDoc',\n        'customPublicMethodWithClassicFunction',\n      ]);\n\n      assert.deepEqual(features[0].properties.map((p) => [p.name, p.type]), [\n        ['a', 'boolean'],\n        ['b', 'string'],\n        ['c', 'number'],\n        ['d', 'number'],\n        ['e', 'string'],\n        ['f', 'Object'],\n        ['g', undefined],\n        ['h', 'string'],\n        ['all', 'Object']\n      ]);\n\n      assert.deepEqual(\n          features[0].attributes.map((p) => [p.name, p.changeEvent]), [\n            ['a', undefined],\n            ['b', undefined],\n            ['c', undefined],\n            ['d', undefined],\n            ['e', 'e-changed'],\n            ['f', undefined],\n            ['g', undefined],\n            ['h', undefined],\n            ['all', 'all-changed']\n          ]);\n\n      assert.deepEqual(\n          features[0].properties.filter((p) => p.readOnly).map((p) => p.name),\n          ['c', 'd', 'g']);\n\n      assert.deepEqual(\n          features[0]\n              .properties.filter((p) => p.default)\n              .map((p) => [p.name, p.default]),\n          [['a', '5'], ['b', '\"test\"']]);\n\n      assert.deepEqual(\n          features[0].properties.filter((p) => p.notify).map((p) => p.name),\n          ['e', 'all']);\n\n      assert.deepEqual(features[0].listeners, [\n        {event: 'event-a', handler: '_handleA'},\n        {event: 'eventb', handler: '_handleB'}\n      ]);\n\n      // Skip not statically analizable entries without emitting a warning\n      assert.equal(\n          features[0]\n              .warnings\n              .filter((w) => w.code === 'invalid-listeners-declaration')\n              .length,\n          0);\n      // Emit warning for non-object `listeners` literal\n      assert.equal(\n          features[1]\n              .warnings\n              .filter((w) => w.code === 'invalid-listeners-declaration')\n              .length,\n          1);\n    });\n\n    test('Polymer 2 class observers crash', async() => {\n      // When Polymer 2 adopted a static getter for observers, it crashed\n      // the Polymer 1 element scanner.\n      const contents = `class TestElement extends Polymer.Element {\n        static get observers() {\n          return foo.bar;\n        }\n      }`;\n\n      const document =\n          new JavaScriptParser().parse(contents, 'test-document.html');\n      const visit = async(visitor: Visitor) => document.visit([visitor]);\n\n      // Scanning should not throw\n      await scanner.scan(document, visit);\n    });\n\n  });\n\n});\n"]}