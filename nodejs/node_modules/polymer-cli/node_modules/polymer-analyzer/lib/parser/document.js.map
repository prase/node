{"version":3,"sources":["parser/document.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;AAEH,wDAAsF;AAEtF;;;;;GAKG;AACH;IAgBE,YAAY,IAAsB;QAChC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAChC,CAAC;IAeD,kBAAkB,CAAC,IAAa;QAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAClD,MAAM,CAAC,iCAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IAC9D,CAAC;IAAA,CAAC;CAQH;AAlDD,wCAkDC","file":"document.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {correctSourceRange, LocationOffset, SourceRange} from '../model/source-range';\n\n/**\n * A parsed Document.\n *\n * @template AstNode The AST type of the document.\n * @template Visitor The type of the visitors that can walk the document.\n */\nexport abstract class ParsedDocument<AstNode, Visitor> {\n  abstract type: string;\n  url: string;\n  baseUrl: string;\n  contents: string;\n  ast: AstNode;\n  isInline: boolean;\n\n  /**\n   * If not null, this is an inline document, and astNode is the AST Node of\n   * this document inside of the parent. (e.g. the <style> or <script> tag)\n   */\n  astNode: any;\n\n  private _locationOffset: LocationOffset|undefined;\n\n  constructor(from: Options<AstNode>) {\n    this.url = from.url;\n    this.baseUrl = from.baseUrl || this.url;\n    this.contents = from.contents;\n    this.ast = from.ast;\n    this._locationOffset = from.locationOffset;\n    this.astNode = from.astNode;\n    this.isInline = from.isInline;\n  }\n\n  /**\n   * Runs a set of document-type specific visitors against the document.\n   */\n  abstract visit(visitors: Visitor[]): void;\n\n  /**\n   * Calls `callback` for each AST node in the document in document order.\n   *\n   * Implementations _must_ call the callback with every node, and must do so\n   * in document order.\n   */\n  abstract forEachNode(callback: (node: AstNode) => void): void;\n\n  sourceRangeForNode(node: AstNode): SourceRange|undefined {\n    const baseSource = this._sourceRangeForNode(node);\n    return correctSourceRange(baseSource, this._locationOffset);\n  };\n\n  protected abstract _sourceRangeForNode(node: AstNode): SourceRange|undefined;\n\n  /**\n   * Convert `this.ast` back into a string document.\n   */\n  abstract stringify(options: StringifyOptions): string;\n}\n\nexport interface Options<A> {\n  url: string;\n  baseUrl?: string;\n  contents: string;\n  ast: A;\n  locationOffset: LocationOffset|undefined;\n  astNode: any|null;\n  isInline: boolean;\n}\n\nexport interface StringifyOptions {\n  /** The desired level of indentation of to stringify at. */\n  indent?: number;\n\n  /**\n   * Parsed (and possibly modified) documents that exist inside this document\n   * whose stringified contents should be used instead of what is in `ast`.\n   */\n  inlineDocuments?: ParsedDocument<any, any>[];\n}\n"]}