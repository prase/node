import * as estree from 'estree';
import * as parse5 from 'parse5';
import { ParsedHtmlDocument } from '../html/html-document';
import { SourceRange, Warning } from '../model/model';
export interface Template extends parse5.ASTNode {
    content: parse5.ASTNode;
}
/**
 * Given a node, return all databinding templates inside it.
 *
 * A template is "databinding" if polymer databinding expressions are expected
 * to be evaluated inside. e.g. <template is='dom-if'> or <dom-module><template>
 *
 * Results include both direct and nested templates (e.g. dom-if inside
 * dom-module).
 */
export declare function getAllDataBindingTemplates(node: parse5.ASTNode): Template[];
/**
 * A databinding expression.
 */
export declare class DatabindingExpression {
    /**
     * If databinding into an attribute this is the element whose attribute is
     * assigned to. If databinding into a text node, this is that text node.
     */
    readonly astNode: parse5.ASTNode;
    /**
   * If databindingInto is 'attribute' this will hold the HTML element
   * attribute that's being assigned to. Otherwise it's undefined.
   */
    readonly attribute: parse5.ASTAttribute | undefined;
    readonly sourceRange: SourceRange;
    readonly warnings: Warning[];
    /** The databinding syntax used. */
    readonly direction: '{' | '[';
    readonly expressionText: string;
    private readonly _expressionAst;
    readonly databindingInto: 'string-interpolation' | 'attribute';
    /**
     * If this is a two-way data binding, and an event name was specified
     * (using ::eventName syntax), this is that event name.
     */
    readonly eventName: string | undefined;
    private readonly locationOffset;
    /**
     * Toplevel properties on the model that are referenced in this expression.
     *
     * e.g. in {{foo(bar, baz.zod)}} the properties are foo, bar, and baz
     * (but not zod).
     */
    properties: Array<{
        name: string;
        sourceRange: SourceRange;
    }>;
    constructor(astNode: parse5.ASTNode, attribute: parse5.ASTAttribute | undefined, sourceRange: SourceRange, direction: '{' | '[', expressionText: string, eventName: string | undefined, databindingInto: 'string-interpolation' | 'attribute', ast: estree.Program);
    /**
     * Given an estree node in this databinding expression, give its source range.
     */
    sourceRangeForNode(node: estree.Node): SourceRange | undefined;
    private _extractPropertiesAndValidate();
    private _extractAndValidateSubExpression(expression, callAllowed);
    private _validationWarning(message, node);
}
/**
 * Find and parse Polymer databinding expressions in HTML.
 */
export declare function scanDocumentForExpressions(document: ParsedHtmlDocument): {
    expressions: DatabindingExpression[];
    warnings: Warning[];
};
export declare function scanDatabindingTemplateForExpressions(document: ParsedHtmlDocument, template: Template): {
    expressions: DatabindingExpression[];
    warnings: Warning[];
};
