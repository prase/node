/**
 * @license
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
import * as dom5 from 'dom5';
import { ASTNode } from 'parse5';
export declare function prepend(parent: ASTNode, node: ASTNode): void;
export declare function prependAll(parent: ASTNode, nodes: ASTNode[]): void;
export declare function insertAllBefore(target: ASTNode, oldNode: ASTNode, nodes: ASTNode[]): void;
export declare function insertAfter(before: ASTNode, node: ASTNode): void;
/**
 * Return all sibling nodes following node.
 */
export declare function siblingsAfter(node: ASTNode): ASTNode[];
/**
 * The results of `queryAll` combined with `querySelectorAllTemplates`.
 */
export declare function querySelectorAllWithTemplates(node: ASTNode, predicate: dom5.Predicate, noRecursion?: boolean): ASTNode[];
/**
 * Find content inside all <template> tags that descend from `node`.
 *
 * If `noRecursion` is true, no results will be returned from nested templates.
 *
 * Will not match elements outside of <template>.
 */
export declare function querySelectorAllTemplates(node: ASTNode, predicate: dom5.Predicate, noRecursion?: boolean): ASTNode[];
